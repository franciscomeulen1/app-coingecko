{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\franc\\\\Desktop\\\\4to Cuatri - Da Vinci\\\\Aplicaciones M\\xF3viles\\\\app-coingecko\\\\App.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\n\nvar App = function App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      coins = _useState2[0],\n      setCoins = _useState2[1];\n\n  var loadData = function loadData() {\n    var res, data;\n    return _regeneratorRuntime.async(function loadData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false'));\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 5:\n            data = _context.sent;\n            setCoins(data);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    loadData();\n  }, []);\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, \"Helo World\"), React.createElement(FlatList, {\n    data: coins,\n    renderItem: function renderItem(item) {\n      console.log(item);\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 18\n        }\n      }, \"coin\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/franc/Desktop/4to Cuatri - Da Vinci/Aplicaciones MÃ³viles/app-coingecko/App.js"],"names":["React","useEffect","useState","App","coins","setCoins","loadData","fetch","res","json","data","item","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;;;;AAKA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAGhB,kBAA0BD,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOE,KAAP;AAAA,MAAcC,QAAd;;AAEC,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACEC,KAAK,CAAC,0HAAD,CADP;;AAAA;AACVC,YAAAA,GADU;AAAA;AAAA,6CAEGA,GAAG,CAACC,IAAJ,EAFH;;AAAA;AAEVC,YAAAA,IAFU;AAGhBL,YAAAA,QAAQ,CAACK,IAAD,CAAR;;AAHgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAODT,EAAAA,SAAS,CAAC,YAAM;AACbK,IAAAA,QAAQ;AACV,GAFQ,EAEN,EAFM,CAAT;AAKA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAGE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEF,KADR;AAEE,IAAA,UAAU,EAAE,oBAACO,IAAD,EAAU;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,aAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAcD,CA/BD;;AAiCA,eAAeR,GAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\n// Cuando cargue la app, quiero hacer una peticion GET --> Usamos useEffect\nimport { View, Text, FlatList } from 'react-native'\n// El componente FlatList recibe un array y me permite recorrerlo de manera facil\n\nconst App = () => {\n\n  //Creo un arreglo llamado coins. A ese arreglo lo va a rellenar la funcion setCoins. E inicialmente va a estar en blanco.\n  const [coins, setCoins] = useState([]); \n\n   const loadData = async () => {\n    const res = await fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false');\n    const data = await res.json(); // Convierto la respuesta a json\n    setCoins(data); // Relleno el array coins con lo datos extraidos del json\n   }\n   // await --> peticion asincrona. Para que funcione await, debe estar en una funcion async\n\n  useEffect(() => {\n     loadData();\n  }, []) //Lo ejecutamos con un array en blanco para avisarle que no esta basado en ningun cambio\n  // A penas cargue este componente App, se va a ejecutar lo que escribamos aca adentro\n\n  return (\n    <View>\n      <Text>Helo World</Text>\n\n      <FlatList\n        data={coins} // El componente recibe como datos el array coins\n        renderItem={(item) => {\n          console.log(item);\n          return <Text>coin</Text>\n        }}  // renderItem me permite devolver uno a uno, c/u de los objetos que estan dentro del array. Es como la funcion MAP\n        // renderItem devuelve un obj q se llama item\n      />\n    </View>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}